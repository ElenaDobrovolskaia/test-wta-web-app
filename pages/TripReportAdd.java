package pages;

import cucumber.api.java8.Tr;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.ArrayList;
import java.util.List;

import static support.TestContext.getDriver;

public class TripReportAdd extends Header{
   @FindBy (id = "s2id_autogen2")
   private WebElement inputWithAutoGeneratedSearchResults;
   @FindBy (css = "input[placeholder*='Enter date']")
   private WebElement dateField;
   @FindBy (css = "select[title*='year']")
   private WebElement yearSelector;
   @FindBy (css = "select[title*='month']")
   private WebElement monthSelector;
   @FindBy (id = "form-widgets-triptype")
   private WebElement typeOfHike;
   @FindBy (id = "form-widgets-tripFeatures-0")
   private WebElement flowersBloomingStatus;
   @FindBy (id = "form-widgets-tripWithChildren-0")
   private WebElement hikingWithKidsStatus;
   @FindBy (id = "form-widgets-tripRoadConditions")
   private WebElement roadConditionsSelector;
   @FindBy (id = "form-widgets-tripBugStatus")
   private WebElement bugStatusSelector;
   @FindBy (id = "form-widgets-tripSnowConditions")
   private WebElement snowConditionsSelector;
   @FindBy (id = "form-widgets-tripTrailConditions")
   private WebElement trailConditionsSelector;
   @FindBy (xpath = "//body[@id='content']/p")
   private WebElement reportInputField;
   @FindBy (id = "form-widgets-tripPhoto1-input")
   private WebElement chooseFileButton;
   @FindBy (id = "form-buttons-save")
   private WebElement submitButton;

    private WebElement autoGeteratedHike(String title){
        new WebDriverWait(getDriver(),10).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(@class,'contenttype-hike')]/span[contains(text(), '"+title+"')]")));
        return getDriver().findElement(By.xpath("//a[contains(@class,'contenttype-hike')]/span[contains(text(), '"+title+"')]"));
    }

    private WebElement dateSelector(String date){
        return getDriver().findElement(By.xpath("//div[@class='picker__day picker__day--infocus'][text()='"+date+"']"));
    }


    public TripReportAdd typeShortHikeName(String shortHikeName){
        inputWithAutoGeneratedSearchResults.sendKeys(shortHikeName);
        return new TripReportAdd();
    }
    public TripReportAdd chooseDesiredHike(String hikeName){
        click(autoGeteratedHike(hikeName));
        return new TripReportAdd();
    }
    public TripReportAdd goToDateField(){
        click(dateField);
        return new TripReportAdd();
    }
    public TripReportAdd pickYear(String year){
        new Select(yearSelector).selectByValue(year);
        return new TripReportAdd();
    }
    public TripReportAdd pickMonth(String month){
        new Select(monthSelector).selectByVisibleText(month);
        return new TripReportAdd();
    }
    public TripReportAdd pickDate(String date){
        jsClick(dateSelector(date));
        return new TripReportAdd();
    }
    public TripReportAdd selectTypeOfHike(String type){
        new Select(typeOfHike).selectByVisibleText(type);
        return new TripReportAdd();
    }
    public TripReportAdd checkInFlowersBlooming(){
        click(flowersBloomingStatus);
        return new TripReportAdd();
    }
    public TripReportAdd checkInHikingWithKids(){
        click(hikingWithKidsStatus);
        return new TripReportAdd();
    }
    public TripReportAdd selectRoadConditions(String status){
        new Select(roadConditionsSelector).selectByVisibleText(status);
        return new TripReportAdd();
    }
    public TripReportAdd selectBugStatus(String status){
        new Select(bugStatusSelector).selectByVisibleText(status);
        return new TripReportAdd();
    }
    public TripReportAdd selectSnowConditions(String status){
        new Select(snowConditionsSelector).selectByVisibleText(status);
        return new TripReportAdd();
    }
    public TripReportAdd selectTrailConditions(String status){
        new Select(trailConditionsSelector).selectByVisibleText(status);
        return new TripReportAdd();
    }
    public TripReportAdd fullTripReport(String report){
        getDriver().switchTo().frame(getDriver().findElement(By.xpath("//iframe[contains(@title, 'Text Area')]")));
        reportInputField.sendKeys(report);
        getDriver().switchTo().defaultContent();
        return new TripReportAdd();
    }
    public TripReportAdd uploadPhoto(){
        String projectPath=System.getProperty("user.dir");
        chooseFileButton.sendKeys(projectPath+"/src/test/resources/data/tolmie.jpg");
        return new TripReportAdd();
    }
    public TripReportAdd submitTripReport(){
        click(submitButton);
        return new TripReportAdd();
    }

}
